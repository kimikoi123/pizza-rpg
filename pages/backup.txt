// let map = null
  // let directionInput = null
  // let cameraPerson = null

  const startGameLoop = (map) => {
    const canvas = canvasRef.current.getContext("2d")
    const directionInput = new DirectionInput()
    directionInput.init()


    map.mountObjects()
    map.startCutscene([
      { who: "hero", type: "walk", direction: "down" },
      { who: "hero", type: "walk", direction: "down" },
      { who: "npcA", type: "walk", direction: "left" },
      { who: "npcA", type: "walk", direction: "left" },
      { who: "npcA", type: "stand", direction: "up", time: 800 },
    ])

    
    const cameraPerson = map.gameObjects.hero

    const step = () => {

      //Clear off the canvas
      canvas.clearRect(0, 0, canvas.canvas.width, canvas.canvas.height)

      //Update all objects
      Object.values(map.gameObjects).forEach((object) => {
        object.update({
          arrow: directionInput.direction,
          map: map,
        })
      })

      //Draw Lower layer
      map.drawLowerImage(canvas, cameraPerson)

      //Draw Game Objects
      Object.values(map.gameObjects)
        .sort((a, b) => {
          return a.y - b.y
        })
        .forEach((object) => {
          object.sprite.draw(canvas, cameraPerson)
        })

      //Draw Upper layer
      map.drawUpperImage(canvas, cameraPerson)

      requestAnimationFrame(() => {
        step()
      })
    }
    step()
  }

  const bindActionInput = (map) => {
    new KeyPressListener("Enter", () => {
      //Is there a person here to talk to?
      map.checkForActionCutscene()
    })
  }

  const bindHeroPositionCheck = (map) => {
    document.addEventListener("PersonWalkingComplete", (e) => {
      if (e.detail.whoId === "hero") {
        //Hero's position has changed
        map.checkForFootstepCutscene()
      }
    })
  }

  const startMap = (map, mapConfig) => {
    map = new OverworldMap(mapConfig);
    map.overworld = this;
    map.mountObjects();
   }

  const init = () => {
    const OVERWORLD_MAPS = {
      DemoRoom: {
        lowerSrc: "/maps/DemoLower.png",
        upperSrc: "/maps/DemoUpper.png",
        gameObjects: {
          hero: new Person({
            isPlayerControlled: true,
            x: withGrid(5),
            y: withGrid(6),
          }),
          npcA: new Person({
            x: withGrid(7),
            y: withGrid(9),
            src: "/characters/people/npc1.png",
            behaviorLoop: [
              { type: "stand",  direction: "left", time: 800 },
              { type: "stand",  direction: "up", time: 800 },
              { type: "stand",  direction: "right", time: 1200 },
              { type: "stand",  direction: "up", time: 300 },
            ],
            talking: [
              {
                events: [
                  { type: "textMessage", text: "I'm busy...", faceHero: "npcA" },
                  { type: "textMessage", text: "Go away!"},
                  { who: "hero", type: "walk",  direction: "up" },
                ]
              }
            ]
          }),
          npcB: new Person({
            x: withGrid(8),
            y: withGrid(5),
            src: "/characters/people/npc2.png",
            // behaviorLoop: [
            //   { type: "walk",  direction: "left" },
            //   { type: "stand",  direction: "up", time: 800 },
            //   { type: "walk",  direction: "up" },
            //   { type: "walk",  direction: "right" },
            //   { type: "walk",  direction: "down" },
            // ]
          }),
        },
        walls: {
          [asGridCoord(7,6)] : true,
          [asGridCoord(8,6)] : true,
          [asGridCoord(7,7)] : true,
          [asGridCoord(8,7)] : true,
        },
        cutsceneSpaces: {
          [asGridCoord(7,4)]: [
            {
              events: [
                { who: "npcB", type: "walk",  direction: "left" },
                { who: "npcB", type: "stand",  direction: "up", time: 500 },
                { type: "textMessage", text:"You can't be in there!"},
                { who: "npcB", type: "walk",  direction: "right" },
                { who: "hero", type: "walk",  direction: "down" },
                { who: "hero", type: "walk",  direction: "left" },
              ]
            }
          ],
          [asGridCoord(5,10)]: [
            {
              events: [
                { type: "changeMap", map: "Kitchen" }
              ]
            }
          ]
        }
        
      },
      Kitchen: {
        lowerSrc: "/maps/KitchenLower.png",
        upperSrc: "/maps/KitchenUpper.png",
        gameObjects: {
          hero: new Person({
            isPlayerControlled: true,
            x: withGrid(5),
            y: withGrid(5),
          }),
          npcB: new Person({
            x: withGrid(10),
            y: withGrid(8),
            src: "/characters/people/npc3.png",
            talking: [
              {
                events: [
                  { type: "textMessage", text: "You made it!", faceHero:"npcB" },
                ]
              }
            ]
          })
        }
      },
    }
    const newMap = new OverworldMap(OVERWORLD_MAPS.DemoRoom)
    startMap(newMap, OVERWORLD_MAPS.DemoRoom)
    bindActionInput(newMap)
    bindHeroPositionCheck(newMap)
    startGameLoop(newMap)
  }
